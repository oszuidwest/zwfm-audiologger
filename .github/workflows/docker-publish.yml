name: Docker Publish

on:
  push:
    tags:
      - 'v*'
  workflow_call:
    inputs:
      version:
        description: 'Version to build'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: true
        default: 'latest'
        type: choice
        options:
        - 'latest'
        - 'edge'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_call" ]; then
          echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          if [ "${{ github.event.inputs.version }}" = "latest" ]; then
            # Get the latest tag
            latest_tag=$(git tag -l "v*" | sort -V | tail -n1)
            echo "version=${latest_tag}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Set Docker tag
      id: docker_tag
      run: |
        version="${{ steps.version.outputs.version }}"
        # Remove 'v' prefix if present for Docker compatibility
        docker_tag=${version#v}
        echo "tag=${docker_tag}" >> $GITHUB_OUTPUT
    
    - name: Parse semantic version
      id: semver
      run: |
        version="${{ steps.docker_tag.outputs.tag }}"
        if [[ $version =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-.*)?$ ]]; then
          echo "major=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          echo "minor=${BASH_REMATCH[2]}" >> $GITHUB_OUTPUT
          echo "patch=${BASH_REMATCH[3]}" >> $GITHUB_OUTPUT
          echo "prerelease=${BASH_REMATCH[4]}" >> $GITHUB_OUTPUT
          echo "is_semver=true" >> $GITHUB_OUTPUT
        else
          echo "is_semver=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Generate Docker tags
      id: docker_tags
      run: |
        IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        TAG="${{ steps.docker_tag.outputs.tag }}"
        
        # Always include the specific version tag
        TAGS="${IMAGE}:${TAG}"
        
        # Add semantic version tags if applicable
        if [ "${{ steps.semver.outputs.is_semver }}" = "true" ] && [ -z "${{ steps.semver.outputs.prerelease }}" ]; then
          TAGS="${TAGS},${IMAGE}:${{ steps.semver.outputs.major }}.${{ steps.semver.outputs.minor }}"
          TAGS="${TAGS},${IMAGE}:${{ steps.semver.outputs.major }}"
          TAGS="${TAGS},${IMAGE}:latest"
        fi
        
        # Add edge tag for edge builds
        if [ "${{ steps.docker_tag.outputs.tag }}" = "edge" ]; then
          TAGS="${TAGS},${IMAGE}:edge"
        fi
        
        echo "tags=${TAGS}" >> $GITHUB_OUTPUT
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.docker_tags.outputs.tags }}
        labels: |
          org.opencontainers.image.title=${{ github.repository }}
          org.opencontainers.image.description=ZuidWest FM Audio Logger
          org.opencontainers.image.vendor=Streekomroep ZuidWest
          org.opencontainers.image.version=${{ steps.docker_tag.outputs.tag }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          COMMIT=${{ github.sha }}
          BUILD_TIME=${{ github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max